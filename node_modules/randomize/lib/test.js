// Generated by CoffeeScript 1.6.2
(function() {
  var ITERATIONS, equal, expect, r, times,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  times = require('underscore').times;

  equal = (expect = require('assert')).equal;

  r = require('./randomize');

  ITERATIONS = 1000;

  describe('randomize', function() {
    it('returns booleans when called without any arguments', function() {
      return times(ITERATIONS, function() {
        var result;

        result = r();
        return expect(result === true || result === false);
      });
    });
    it('returns 0-n when called with a number', function() {
      return times(ITERATIONS, function() {
        var result;

        result = r(10);
        return expect(result === 0 || result === 1 || result === 2 || result === 3 || result === 4 || result === 5 || result === 6 || result === 7 || result === 8 || result === 9);
      });
    });
    it('returns a random array member when called with an array', function() {
      var fakeArray;

      fakeArray = ['foo', 'bar', 'baz', 'qux'];
      return times(ITERATIONS, function() {
        var result;

        result = r(fakeArray);
        return expect(__indexOf.call(fakeArray, result) >= 0);
      });
    });
    it('returns a random property when called with an object', function() {
      var fakeObject;

      fakeObject = {
        a: 1,
        b: 2,
        c: 3,
        d: 4,
        e: 5,
        f: 6
      };
      return times(ITERATIONS, function() {
        var key, keys, result, value;

        result = r(fakeObject);
        keys = Object.keys(result);
        equal(keys.length, 1);
        key = keys[0];
        value = result[key];
        switch (key) {
          case 'a':
            return equal(value, 1);
          case 'b':
            return equal(value, 2);
          case 'c':
            return equal(value, 3);
          case 'd':
            return equal(value, 4);
          case 'e':
            return equal(value, 5);
          case 'f':
            return equal(value, 6);
        }
      });
    });
    it('returns a random argument when called with multiple arguments', function() {
      var fakeArray;

      fakeArray = ['foo', 'bar', 'baz', 'qux'];
      return times(ITERATIONS, function() {
        var result;

        result = r.apply(null, fakeArray);
        return expect(__indexOf.call(fakeArray, result) >= 0);
      });
    });
    it('returns a random character when called with a string', function() {
      return times(ITERATIONS, function() {
        var result;

        result = r('foobar');
        return expect(result === 'f' || result === 'o' || result === 'b' || result === 'a' || result === 'r');
      });
    });
    return it('returns null otherwise', function() {
      return times(ITERATIONS, function() {
        var result;

        result = r(NaN);
        return equal(result, null);
      });
    });
  });

}).call(this);
